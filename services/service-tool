#!/usr/bin/env python2

import os
import sys
import argparse
import glob
import json

ROOT = os.path.dirname(os.path.abspath(__file__))


def get_parser():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest="subcommand")
    format_parser = subparsers.add_parser(
        "format", description="Format services."
    )
    format_parser.set_defaults(func=format_cmd)
    validate_parser = subparsers.add_parser(
        "validate", description="Validate services."
    )
    validate_parser.set_defaults(func=validate_cmd)
    return parser


def get_service_filenames(root):
    filenames = []
    for item in glob.glob(os.path.join(root, "*")):
        if os.path.isdir(item):
            filenames += get_service_filenames(item)
        elif os.path.isfile(item):
            if os.path.basename(item) == "service.json":
                filenames.append(item)
    return filenames


def format_cmd(args):
    for fn in get_service_filenames(ROOT):
        with open(fn, "r") as f:
            data = json.load(f)
        with open(fn, "w") as f:
            json.dump(
                data, f, indent=4, sort_keys=True, separators=(",", ": ")
            )
            f.write("\n")  # add final newline that dump doesn't add.


def validate_cmd(args):
    failed = []
    for fn in get_service_filenames(ROOT):
        with open(fn, "r") as f:
            data = f.read().rstrip()
        try:
            j = json.loads(data)
            j = json.dumps(j, indent=4, sort_keys=True, separators=(",", ": "))
            if data != j.rstrip():
                failed.append(fn)
        except ValueError:
            failed.append(fn)
    if len(failed) != 0:
        print "The following services are not formatted correctly:"
        for f in failed:
            print f
        sys.exit(1)


def main():
    parser = get_parser()
    args = parser.parse_args()
    args.func(args)


if __name__ == "__main__":
    main()
